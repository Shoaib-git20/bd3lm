defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: openwebtext
  - /model: small
  - /strategy: ddp
  - /noise: loglinear
  - /lr_scheduler: constant_warmup
  - /algo: bd3lm

mode: train  # train / ppl_eval / sample_eval
diffusion: absorbing_state

seed: 1

block_size: ${model.length}

loader:
  global_batch_size: 512
  eval_global_batch_size: ${.global_batch_size}
  # Note: batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: ${eval:"len(__import__('os').sched_getaffinity(0))"}
  #num_workers: 32
  pin_memory: True 

sampling:
  noise_removal: False
  num_sample_batches: 1  # Total samples: `num_gpus` * `loader.eval_batch_size` * num_sample_batches
  var_length: False
  logdir: ./samples_${algo.name}_len${model.length}_blocksize${block_size}
  nucleus_p: 1.0
  first_hitting: True # should be set to true when T >> block_size
  kv_cache: False

training:
  ema: 0
  antithetic_sampling: True
  sampling_eps: 1e-3
  coeff_clip: -1.
  resample: False
  sampling_eps_min: 1e-3
  sampling_eps_max: 1.0
  from_pretrained: null
  eval_nll: True # always evaluate nll if block size is 1

eval:
  checkpoint_path: ${cwd:}/checkpoints/last.ckpt  # Used to evaluate a checkpoint after training.
  disable_ema: False
  perplexity_batch_size: 8
  compute_perplexity_on_sanity: False
  gen_ppl_eval_model_name_or_path: gpt2  # gpt2-large, meta-llama/Llama-2-7b-hf
  generate_samples: False

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8

trainer:
  _target_: lightning.Trainer
  accelerator: cuda
  num_nodes: 1
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0
  precision: 'bf16'
  fast_dev_run: True
  num_sanity_val_steps: 2
  max_epochs: 10
  max_steps: 25
  log_every_n_steps: 10
  limit_train_batches: 0.1   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 100     # validate on full dataset, can be used to toggle quick run
  val_check_interval: 1.0 

wandb:
  project: BD3-LMs
  notes: Block Denoising Discrete Diffusion Language Models
  group: null
  job_type: null
  name: null
  id: ${.name}_${seed}
  tags:
    - ${noise.type}
    - ${data.train}
    - ${data.valid}

hydra:
  run:
    dir: ./outputs/${data.train}/${now:%Y.%m.%d}/${now:%H%M%S}
  job:
    chdir: true

checkpointing:
  # Use custom `save_dir` if, e.g., saving to S3 bucket, otherwise leave this parameter as is
  save_dir: ${cwd:}
  # Note: `checkpoints` path should correspond to `checkpoint_every_n_steps.dirpath`
  resume_from_ckpt: False
  resume_ckpt_path: ${.save_dir}/checkpoints/last.ckpt
  save_interval: 1000

strategy:
  name: ddp
  mixed_precision: bf16
  sharding_strategy: FULL_SHARD